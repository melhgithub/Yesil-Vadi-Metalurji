@using Entity.Concrete
@using Yesil_Vadi_Metalurji.Dto
@using System.ComponentModel
@using Newtonsoft.Json
@model OrdersViewModel
@{
    ViewData["Title"] = "Siparişler";
    Layout = "~/Views/Shared/_AdminTest.cshtml";
}

<h1>Sipariş Listesi</h1>

@await Html.PartialAsync("_ScriptImports")

@using (Html.BeginForm("Filter", "OrderTest", FormMethod.Post, new { id = "filterForm" }))
{
    var statusList = new List<SelectListItem>
{
        new SelectListItem { Value = "0", Text = "TÜMÜ" },
        new SelectListItem { Value = "1", Text = "SİPARİŞTE" },
        new SelectListItem { Value = "2", Text = "KALDIRILDI" },
        new SelectListItem { Value = "3", Text = "SİPARİŞ İPTAL EDİLDİ" },
        new SelectListItem { Value = "4", Text = "ÜRETİME GEÇİLDİ" }
    };
    var activeList = new List<SelectListItem>
{
        new SelectListItem { Value = "0", Text = "TÜMÜ" },
        new SelectListItem { Value = "1", Text = "AKTİF" },
        new SelectListItem { Value = "2", Text = "AKTİF DEĞİL" },
    };

<div class="card">
    <div class="card-header">
        <h3 class="card-title">
            <i class="fas fa-filter"></i>
            Filtrele
        </h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-2">
                <dt>@Html.LabelFor(m => m.FilterDto.Status, "Durum:")</dt>
                @Html.DropDownListFor(m => m.FilterDto.Status, statusList, new { @class = "form-control" })
            </div>
            <div class="col-sm-2">
                <dt>@Html.LabelFor(m => m.FilterDto.Active, "Aktiflik:")</dt>
                @Html.DropDownListFor(m => m.FilterDto.Active, activeList, new { @class = "form-control" })
            </div>
            <div class="col-sm-3">
                <dt>@Html.LabelFor(m => m.FilterDto.Name, "İsim:")</dt>
                @Html.TextBoxFor(m => m.FilterDto.Name, new { @class = "form-control", placeholder = "İsim" })
            </div>
            <div class="col-sm-2">
                <dt>@Html.LabelFor(m => m.FilterDto.LastName, "Soyisim:")</dt>
                @Html.TextBoxFor(m => m.FilterDto.LastName, new { @class = "form-control", placeholder = "Soyisim" })
            </div>
            <div class="col-sm-3">
                <dt>@Html.LabelFor(m => m.FilterDto.Mail, "E-Mail:")</dt>
                @Html.TextBoxFor(m => m.FilterDto.Mail, new { @class = "form-control", placeholder = "E-Mail" })
            </div>
            <div class="col-sm-3">
                <dt>@Html.LabelFor(m => m.FilterDto.PhoneNumber, "Tel. No:")</dt>
                @Html.TextBoxFor(m => m.FilterDto.PhoneNumber, new { @class = "form-control", placeholder = "Tel. No" })
            </div>
            <div class="col-sm-3">
                <dt>@Html.LabelFor(m => m.FilterDto.TotalPrice, "Toplam Fiyat:")</dt>
                @Html.TextBoxFor(m => m.FilterDto.TotalPrice, new { @class = "form-control", placeholder = "Toplam Fiyat", type = "number", step = "0.01" })
            </div>
            <div class="col-sm-3">
                <dt>@Html.LabelFor(m => m.FilterDto.TotalPiece, "Toplam Adet:")</dt>
                @Html.TextBoxFor(m => m.FilterDto.TotalPiece, new { @class = "form-control", placeholder = "Toplam Adet", type = "number" })
            </div>
            <div class="col-sm-3">
                <dt>@Html.LabelFor(m => m.FilterDto.ProductPiece, "Ürün Adeti:")</dt>
                @Html.TextBoxFor(m => m.FilterDto.ProductPiece, new { @class = "form-control", placeholder = "Ürün Adeti", type = "number" })
            </div>
        </div>
    </div>
</div>
}



<div class="card">
    <div class="card-header">
        <h3 class="card-title">
            <i class="fas fa-cubes"></i>
            Siparişler
        </h3>
    </div>

    <div class="card-body">

        <div id="orderTable" class="table-responsive">
            <table id="orderGrid" class="table table-bordered table-striped"></table>
            <div id="orderGridPager"></div>
        </div>

    </div>

</div>



<script>
    $(document).ready(function () {
        filterOrders();
        $('#filterForm select, #filterForm input[type="text"], #filterForm input[type="number"]').on('change', function () {
            filterOrders();
        });
    });

    var firstModal = null;


    function filterOrders() {
        var formData = $('#filterForm').serialize();
        console.log(formData);

        var orderGrid = $('#orderGrid');

        $.ajax({
            url: '@Url.Action("Filter", "OrderTest")',
            type: 'POST',
            data: formData,
            dataType: 'json',
            success: function (response) {
                var data = response;
                console.log(data);
                showDatas(data);
            },
            error: function (error) {
                console.log("Listeleme esnasında hata oluştu: ", error);
            }
        });
    }

    function showDatas(data) {
        var orderGrid = $('#orderGrid');

        if (orderGrid.length) {
            orderGrid.jqGrid('GridUnload');

            orderGrid.jqGrid({
                data: data,
                colModel: [
                    { name: 'id', label: 'ID', width: 30 },
                    { name: 'name', label: 'İsim', width: 80 },
                    { name: 'lastname', label: 'Soyisim', width: 80 },
                    { name: 'mail', label: 'E-Mail', width: 100 },
                    { name: 'phonenumber', label: 'Telefon Numarası', width: 100 },
                    {
                        name: 'createdate',
                        label: 'Oluşturulma Tarihi',
                        width: 100,
                        formatter: function (cellValue) {
                            if (cellValue) {
                                var date = new Date(cellValue);
                                var formattedDate = (date.getDate() < 10 ? '0' : '') + date.getDate() + '.' +
                                    ((date.getMonth() + 1 < 10 ? '0' : '') + (date.getMonth() + 1)) + '.' +
                                    date.getFullYear();
                                return formattedDate;
                            } else {
                                return '';
                            }
                        }
                    },
                    { name: 'totalprice', label: 'Toplam Fiyat', width: 80 },
                    { name: 'totalpiece', label: 'Toplam Adet', width: 80 },
                    { name: 'productpiece', label: 'Ürün Adeti', width: 80 },
                    {
                        name: 'status',
                        label: 'Durum',
                        width: 100,
                        formatter: function (cellValue) {
                            var statusText = '';
                            var statusStyle = '';

                            switch (cellValue) {
                                case 1:
                                    statusText = 'Siparişte';
                                    statusStyle = 'color: green;';
                                    break;
                                case 2:
                                    statusText = 'KALDIRILDI';
                                    statusStyle = 'color: red;';
                                    break;
                                case 3:
                                    statusText = 'Sipariş İptal Edildi';
                                    statusStyle = 'color: red;';
                                    break;
                                case 4:
                                    statusText = 'Üretime Geçildi';
                                    statusStyle = 'color: green;';
                                    break;
                                case 5:
                                    statusText = 'Beklemede';
                                    statusStyle = 'color: orange;';
                                    break;
                                default:
                                    break;
                            }

                            return '<span style="' + statusStyle + '">' + statusText + '</span>';
                        }
                    },
                    {
                        name: 'active',
                        label: 'Aktiflik',
                        width: 80,
                        formatter: function (cellValue) {
                            var activeText = '';
                            var activeStyle = '';

                            switch (cellValue) {
                                case true:
                                    activeText = 'AKTİF';
                                    activeStyle = 'color: green;';
                                    break;
                                case false:
                                    activeText = 'AKTİF DEĞİL';
                                    activeStyle = 'color: red;';
                                    break;
                                default:
                                    break;
                            }

                            return '<span style="' + activeStyle + '">' + activeText + '</span>';
                        }
                    },
                    {
                        name: 'actions', label: '', width: 310,
                        formatter: function (cellValue, options, rowObject) {
                            if (rowObject.status === 1) {
                                var buttons = '<button class="btn btn-success open-ordertoproduction-modal" ' +
                                    'data-orderid="' + rowObject.id + '">Üretime Geç</button>' +
                                    '<button class="btn btn-warning open-delete-modal" ' +
                                    'data-orderid="' + rowObject.id + '">İptal Et</button>' +
                                    '<button class="btn btn-warning open-detail-modal" ' +
                                    'data-orderid="' + rowObject.id + '">Detaylar</button>';
                            }
                            if (rowObject.status === 2) {
                                return '';
                            }
                            if (rowObject.status === 3) {
                                var buttons = '<button class="btn btn-success open-approve-modal" ' +
                                    'data-orderid="' + rowObject.id + '">Onayla</button>' +
                                    '<button class="btn btn-warning open-detail-modal" ' +
                                    'data-orderid="' + rowObject.id + '">Detaylar</button>';

                            }
                            if (rowObject.status === 4) {
                                var buttons = '<button class="btn btn-warning open-detail-modal" ' +
                                    'data-orderid="' + rowObject.id + '">Detaylar</button>';
                            }
                            if (rowObject.status === 5) {
                                var buttons = '<button class="btn btn-success open-approve-modal" ' +
                                    'data-orderid="' + rowObject.id + '">Onayla</button>' +
                                    '<button class="btn btn-warning open-delete-modal" ' +
                                    'data-orderid="' + rowObject.id + '">İptal Et</button>'+
                                    '<button class="btn btn-warning open-detail-modal" ' +
                                    'data-orderid="' + rowObject.id + '">Detaylar</button>';
                            }
                            return buttons;
                        }
                    }
                ],
                pager: '#orderGridPager',
                rowNum: 10,
                rowList: [10, 20, 30, 40, 50],
                sortname: 'id',
                viewrecords: true,
                autoheight: true,
                autoWidth: true,
                responsive: true,

                footerrow: true,
                userDataOnFooter: true,
                gridComplete: function () {
                    var sumTotalPrice = orderGrid.jqGrid('getCol', 'totalprice', false, 'sum');
                    var sumTotalPiece = orderGrid.jqGrid('getCol', 'totalpiece', false, 'sum');
                    var sumProductPiece = orderGrid.jqGrid('getCol', 'productpiece', false, 'sum');

                    sumTotalPiece = Math.floor(sumTotalPiece);
                    sumProductPiece = Math.floor(sumProductPiece);

                    orderGrid.jqGrid('footerData', 'set', {
                        name: 'Toplam:',
                        totalprice: sumTotalPrice.toFixed(2),
                        totalpiece: sumTotalPiece.toString(),
                        productpiece: sumProductPiece.toString()
                    });
                }
            });
        }
    }


    function openDeleteSiparisModal(button) {
    var data = button.dataset;
        firstModal = $.dialog({
    title: 'Sipariş Kaldır',
    content: `
    <!-- ${JSON.stringify(data)} -->
    <form method="post" action="@Url.Action("RemoveOrder", "OrderTest")">

        <div class="form-group">
            <label>Kaldırmak istiyor musunuz ?</label>
        </div>

        <div class="form-group">
            <input type="text" id="ID" name="ID" class="form-control" value="${data.orderid}" required/>

        </div>

        <div class="form-group">
            <input type="submit" value="Kaldır" class="btn btn-warning w-100" />
        </div>

    </form>
    `
    });
    }


    function openProductionSiparisModal(button) {
    var data = button.dataset;
        firstModal = $.dialog({
    title: 'Siparişe Geç',
    content: `
    <!-- ${JSON.stringify(data)} -->
    <form method="post" action="@Url.Action("GoToProduction", "OrderTest")">

        <div class="form-group">
            <label>Üretime geçmek istiyor musunuz ?</label>
        </div>

        <div class="form-group">
            <input type="text" id="ID" name="ID" class="form-control" value="${data.orderid}" required/>

        </div>

        <div class="form-group">
            <input type="submit" value="Onayla" class="btn btn-primary w-100" />
        </div>

    </form>
    `
    });
    }


    function openApproveSiparisModal(button) {
    var data = button.dataset;
        firstModal = $.dialog({
    title: 'Sipariş Onayla',
    content: `
    <!-- ${JSON.stringify(data)} -->
    <form method="post" action="@Url.Action("ApproveOrder", "OrderTest")">

        <div class="form-group">
            <label>Onaylamak istiyor musunuz ?</label>
        </div>

        <div class="form-group">
            <input type="text" id="ID" name="ID" class="form-control" value="${data.orderid}" required/>

        </div>

        <div class="form-group">
            <input type="submit" value="Onayla" class="btn btn-primary w-100" />
        </div>

    </form>
    `
    });
    }

    function openDetailModal(button) {
        var data = button.dataset;

        $.ajax({
            url: '@Url.Action("GetOfferDetailsByOrderId", "OrderTest")',
            type: 'GET',
            data: { orderId: data.orderid },
            dataType: 'json',
            success: function (response) {
                var detailHtml = '';

                if (response.length > 0) {
                    var firstDetail = response[0];

                    var createDate = new Date(firstDetail.createdate);
                    var formattedCreateDate = (createDate.getDate() < 10 ? '0' : '') + createDate.getDate() + '.' +
                        ((createDate.getMonth() + 1 < 10 ? '0' : '') + (createDate.getMonth() + 1)) + '.' +
                        createDate.getFullYear();

                    detailHtml += `
                        <div class="offer-detail">
                            <p>İsim: ${firstDetail.name}</p>
                            <p>Soyisim: ${firstDetail.lastname}</p>
                            <p>E-Mail: ${firstDetail.mail}</p>
                            <p>Telefon Numarası: ${firstDetail.phonenumber}</p>
                            <p>Oluşturulma Tarihi: ${formattedCreateDate}</p>
                        </div>
                        <hr class="divider">
                    `;

                    for (var i = 0; i < response.length; i++) {
                        var detail = response[i];
                        detailHtml += `
                            <div class="offer-detail">
                                <p>Ürün Adı: ${detail.productname}</p>
                                <p>Adet: ${detail.productpiece}</p>
                                <p>Fiyat: ${detail.productprice}</p>
                            </div>
                            <hr class="divider">
                        `;
                    }
                }

                firstModal = $.dialog({
                    title: 'Sipariş Detayları',
                    content: detailHtml
                });
            },
            error: function (error) {
                console.log("Detayları getirirken hata oluştu: ", error);
            }
        });
    }




    $(document).on('click', '.open-delete-modal', function () {
        openDeleteSiparisModal(this);
    });

    $(document).on('click', '.open-approve-modal', function () {
        openApproveSiparisModal(this);
    });

    $(document).on('click', '.open-ordertoproduction-modal', function () {
        openProductionSiparisModal(this);
    });

    $(document).on('submit', 'form', function (e) {
        e.preventDefault();
        var form = $(this);

        $.ajax({
            url: form.attr('action'),
            type: form.attr('method'),
            data: form.serialize(),
            success: function (response) {
                var message = response;
                mesajDialog = $.dialog({
                    title: 'İşlem Sonucu',
                    content: message,
                    closeButton: false
                });
                setTimeout(function () {
                    mesajDialog.close();
                    if (firstModal) {
                        firstModal.close();
                    }
                    filterOrders();
                }, 1500);
            },
            error: function (error) {
                alert("Başarısız");
            }
        });
    });

    $(document).on('click', '.open-detail-modal', function () {
        openDetailModal(this);
    });


    $(document).ajaxError(function () {
        adet = 0;
    });


</script>

